{"version":3,"file":"static/js/327.83e6787b.chunk.js","mappings":"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","sources":["atom/addressState.js","components/singup/Address.js","pages/sign/SigninkakaoPage.js","styles/login/loginCss.js","styles/sign/signArea.js"],"sourcesContent":["import { atom } from \"recoil\";\n\nexport const addressState = atom({\n  key: \"addressState\",\n  default: \"\",\n});\n","import { Button, Form, Input, Modal } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport DaumPostcode from \"react-daum-postcode\";\nimport { useRecoilState } from \"recoil\";\nimport { Common } from \"../../styles/CommonCss\";\nimport { postCodeStyle, themeObj } from \"../../styles/sign/signArea\";\nimport { addressState } from \"../../atom/addressState\";\n\nconst Address = ({ onAddressChange, address:oladdress }) => {\n  const [address, setAddress] = useRecoilState(addressState);\n  const [last, setLast] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [values, setValues] = useState({}); // values 객체 추가\n\n  useEffect(()=>{\n    setAddress(oladdress);\n  },[]);\n\n  const completeHandler = data => {\n    const { address, zonecode } = data;\n\n    setAddress(address);\n    setLast(address); // lastaddress를 address와 동일하게 설정\n    onAddressChange({ zonecode, address, last: address }); // lastaddress를 address와 동일하게 설정\n    setIsOpen(false);\n\n    // 주소 정보를 values 객체에 추가\n    setValues(prevValues => ({\n      ...prevValues,\n      address: address,\n    }));\n  };\n\n  // 주소 입력 변경 핸들러\n  const inputChangeHandler = event => {\n    setAddress({ ...address, last: event.target.value }); // Recoil 상태 업데이트\n  };\n\n  const closeHandler = state => {\n    if (state === \"FORCE_CLOSE\") {\n      setIsOpen(false);\n    } else if (state === \"COMPLETE_CLOSE\") {\n      setIsOpen(false);\n    }\n  };\n\n  const toggleHandler = () => {\n    setIsOpen(true);\n    setIsModalOpen(true);\n  };\n\n  const handleOk = () => {\n    setIsModalOpen(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <>\n      <div style={{ display: \"flex\", width: 193 }} onClick={toggleHandler}>\n        <Form.Item valuePropName=\"zipCode\">\n          <Input\n            style={{ width: 520, height: 60, fontSize: \"20px\" }}\n            value={address}\n            placeholder=\"주소\"\n            name=\"address\"\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Button\n            type=\"button\"\n            style={{\n              width: \"110px\",\n              height: \"60px\",\n              backgroundColor: `${Common.color.p900}`,\n              border: \"none\",\n              marginLeft: \"8px\",\n              color: \"white\",\n              fontWeight: \"bold\",\n              fontSize: \"16px\",\n            }}\n          >\n            주소찾기\n          </Button>\n        </Form.Item>\n      </div>\n\n      {isOpen && (\n        <Modal\n          title=\"주소 찾기\"\n          open={isModalOpen}\n          onOk={handleOk}\n          onCancel={handleCancel}\n          footer=\"\"\n        >\n          <DaumPostcode\n            theme={themeObj}\n            style={postCodeStyle}\n            onComplete={completeHandler}\n            onClose={closeHandler}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default Address;\n","import axios from \"axios\";\r\nimport { Button, Form, Input, Select } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { readOnlySelector, useRecoilState } from \"recoil\";\r\nimport { postSign } from \"../../api/signUpApi\";\r\nimport { addressState } from \"../../atom/addressState\";\r\nimport Address from \"../../components/singup/Address\";\r\nimport { P20, SignWrap } from \"../../styles/basic\";\r\nimport { Common } from \"../../styles/CommonCss\";\r\nimport { LoginTitle, LoginWrap } from \"../../styles/login/loginCss\";\r\nimport { areaStyle, buttonPrimaryStyle } from \"../../styles/sign/signArea\";\r\nimport { SERVER_URL } from '../../api/config';\r\nimport Swal from 'sweetalert2';\r\n\r\nconst initState = {\r\n  email: \"\",\r\n  nickname: \"\",\r\n  password: \"\",\r\n  passwordch: \"\",\r\n  address: \"\",\r\n  address2: \"\",\r\n  gender: \"\",\r\n  birthdate: \"\",\r\n  phone: \"\",\r\n};\r\nvar test = true;\r\nconst SigninkakaoPage = () => {\r\n  const code = new URL(window.location.href).searchParams.get(\"code\");\r\n\r\n  const Rest_api_key = \"94b443da7db84c565579d43ba563dd3f\";\r\n  const LOGOUT_REDIRECT_URI = \"http://localhost:3000/sign/kakao/logout\";\r\n  \r\n  const kakaoURLout = `https://kauth.kakao.com/oauth/logout?client_id=${Rest_api_key}&logout_redirect_uri=${LOGOUT_REDIRECT_URI}`;\r\n\r\n  const handleLogout = () => {\r\n    window.location.href = kakaoURLout;\r\n};\r\n\r\n  const navigate = useNavigate();\r\n  const [memberInfo, setMemberInfo] = useState(initState);\r\n\r\n  // const [address, setAddress] = useState(\"\");\r\n  const [nickname, setNickname] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordch, setPasswordch] = useState(\"\");\r\n  const [gender, setGender] = useState(\"\");\r\n  const [birthdate, setBirthdate] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [address, setAddress] = useRecoilState(addressState);\r\n  const [values, setValues] = useState({});\r\n  const [address2, setAddress2] = useState(\"\");\r\n\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [errorCode, setErrorCode] = useState(\"\");\r\n\r\n  const loginAxios = async () => {\r\n    console.log('한번만 돌아줘')\r\n    await axios\r\n      .get(\"http://localhost:8080/kakao/login\", {\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          token: code,\r\n        },\r\n      })\r\n      .then(res => {\r\n        if(JSON.stringify(res.status).startsWith('2')){\r\n          setEmail(res.data.email);\r\n          setNickname(res.data.nickname)\r\n        }\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  if (code !== null && test == true) {\r\n    test = false;\r\n    loginAxios();\r\n  }\r\n\r\n  const updateAddressInfo = ({ zonecode, address }) => {\r\n    // 주소 정보 업데이트\r\n    // setZonecode(zonecode);\r\n    setAddress(address);\r\n  };\r\n\r\n  const handleGenderChange = value => {\r\n    setGender(value); // 성별 상태 업데이트\r\n    setValues(prevValues => ({\r\n      ...prevValues,\r\n      gender: value,\r\n    }));\r\n  };\r\n  const onFinish = inivalues => {\r\n    const values = {\r\n      email,\r\n      password,\r\n      passwordch,\r\n      birthdate,\r\n      nickname,\r\n      phone,\r\n      gender: inivalues.gender,\r\n      address,\r\n      address2,\r\n    };\r\n    console.log(\"보냄\" + JSON.stringify(values));\r\n    postSign({\r\n      values,\r\n      address,\r\n      withdrawStatus: \"Y\",\r\n      successFn,\r\n      failFn,\r\n      errorFn,\r\n    });\r\n  };\r\n\r\n  const successFn = data => {\r\n    // console.log(\"successFn : \", data);\r\n      setMemberInfo(data);\r\n      Swal.fire(\"가입 완료!\");\r\n      navigate(`/sign/in`);\r\n      window.scroll(0,0)\r\n  };\r\n\r\n  const failFn = data => {\r\n    console.log(\"failFn : \", data);\r\n    setErrorMessage(data.errorMessage);\r\n    setErrorCode(data.errorCode);\r\n    alert(data.errorMessage);\r\n  };\r\n\r\n  const errorFn = data => {\r\n    // console.log(\"errorFn : \", data);\r\n    alert(\"서버상태 불안정 다음에 회원가입 시도\");\r\n    setMemberInfo(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // address 상태가 변경될 때마다 initialValues 업데이트\r\n    setMemberInfo(prevState => ({\r\n      ...prevState,\r\n      address: address,\r\n    }));\r\n  }, [address]);\r\n\r\n  return (\r\n    <div>\r\n      <LoginWrap>\r\n        <LoginTitle>\r\n          <p className=\"logo\">회원가입</p>\r\n        </LoginTitle>\r\n        <div style={{ marginBottom: \"20px\" }}>\r\n          <P20 style={{ color: `${Common.color.f900}` }}>\r\n            만 20세 미만은 회원가입이 불가합니다.\r\n          </P20>\r\n          <P20>아래 정보를 입력하시면 회원가입이 완료됩니다.</P20>\r\n        </div>\r\n\r\n        <SignWrap>\r\n          <Form\r\n            name=\"normal_login\"\r\n            className=\"login-form\"\r\n            initialValues={{\r\n              remember: true,\r\n              email: memberInfo.email,\r\n              password: memberInfo.password,\r\n              passwordch: memberInfo.passwordch,\r\n              birthdate: memberInfo.birthdate,\r\n              nickname: memberInfo.nickname,\r\n              phone: memberInfo.phone,\r\n              gender: memberInfo.gender,\r\n              address: address,\r\n              address2: memberInfo.address2,\r\n            }}\r\n            onFinish={onFinish}\r\n          >\r\n            <div style={{ marginBottom: \"80px\" }}>\r\n              <P20 style={{ fontWeight: \"bold\", marginBottom: \"20px\" }}>\r\n                본인인증정보\r\n              </P20>\r\n              <Form.Item\r\n                name=\"nickname\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"닉네임을 입력하세요.\",\r\n                  },\r\n                  {\r\n                    pattern: /^[가-힣]{2,10}$/,\r\n                    message: \"한글로 2~10자 사이의 이름을 입력하세요.\",\r\n                  },\r\n                  {\r\n                    whitespace: true,\r\n                    message: \"이름은 공백만으로 만들 수 없습니다\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  style={areaStyle}\r\n                  placeholder={nickname}\r\n                  onChange={e => setNickname(e.target.value)}\r\n                  value={nickname}\r\n                  disabled\r\n                />\r\n              </Form.Item>\r\n              <div style={{ display: \"flex\" }}>\r\n                <Form.Item\r\n                  name=\"birthdate\"\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: \"생년월일을 입력하세요.\",\r\n                    },\r\n                    {\r\n                      pattern: /^[0-9]{8}$/,\r\n                      message: \"숫자로 8자로 입력해주세요.\",\r\n                    },\r\n                    {\r\n                      pattern: /^[0-9]+$/,\r\n                      message: \"숫자만 입력하세요.\",\r\n                    },\r\n                    {\r\n                      whitespace: true,\r\n                      message: \"공백만으로 만들 수 없습니다\",\r\n                    },\r\n                    {\r\n                      validator: (_, value) => {\r\n                        // 주민등록번호 문자열을 날짜로 변환\r\n                        const year = value.substr(0, 4);\r\n                        const month = value.substr(4, 2);\r\n                        const day = value.substr(6, 2);\r\n\r\n                        // 현재 날짜 구하기\r\n                        const currentDate = new Date();\r\n\r\n                        // 생년월일 계산\r\n                        const birthYear =(\r\n                          parseInt(year.substr(0, 2)) > 19\r\n                            ? 2000 + parseInt(year.substr(2, 2))\r\n                            : 1900 + parseInt(year.substr(2, 2)));\r\n                        const birthDate = new Date(\r\n                          birthYear,\r\n                          parseInt(month),\r\n                          parseInt(day),\r\n                        );\r\n\r\n                        // 나이 계산\r\n                        const age =\r\n                          currentDate.getFullYear() - birthDate.getFullYear();\r\n\r\n                        // 생일이 지났는지 체크\r\n                        // if (\r\n                        //   currentDate.getMonth() < birthDate.getMonth() ||\r\n                        //   (currentDate.getMonth() === birthDate.getMonth() &&\r\n                        //     currentDate.getDate() < birthDate.getDate())\r\n                        // )\r\n                          if (age < 20) {\r\n                            // 20세 미만인 경우 에러 반환\r\n                            return Promise.reject(\r\n                              \"20세 미만은 가입할 수 없습니다.\",\r\n                            );\r\n                          }\r\n                        return Promise.resolve();\r\n                      },\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Input\r\n                    style={{ width: 520, height: 60, fontSize: \"20px\" }}\r\n                    placeholder=\"생년월일(8자리)\"\r\n                    onChange={e => setBirthdate(e.target.value)}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item name=\"gender\">\r\n                  <Select\r\n                    style={{\r\n                      width: \"110px\",\r\n                      height: \"60px\",\r\n                      backgroundColor: `${Common.color.p300}`,\r\n                      marginLeft: \"8px\",\r\n                      color: `${Common.color.p600}`,\r\n                      fontSize: \"20px\",\r\n                      borderRadius: \"20px\",\r\n                    }}\r\n                    onClick={handleGenderChange}\r\n                  >\r\n                    <Select.Option value=\"\">성별</Select.Option>\r\n                    <Select.Option value=\"FEMALE\">여성</Select.Option>\r\n                    <Select.Option value=\"MALE\">남성</Select.Option>\r\n                  </Select>\r\n                </Form.Item>\r\n              </div>\r\n              <div style={{ display: \"flex\" }}>\r\n                <Form.Item\r\n                  name=\"phone\"\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: \"전화번호를 입력 해주세요\",\r\n                    },\r\n                    {\r\n                      pattern: /^[0-9]+$/,\r\n                      message: \"숫자만 입력하세요.\",\r\n                    },\r\n                    {\r\n                      whitespace: true,\r\n                      message: \"전화번호는 공백만으로 만들 수 없습니다\",\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Input\r\n                    // defaultValue=\"010\"\r\n                    style={{ width: 520, height: 60, fontSize: \"20px\" }}\r\n                    placeholder=\"전화번호\"\r\n                    onChange={e => setPhone(e.target.value)}\r\n                  />\r\n                </Form.Item>\r\n              </div>\r\n            </div>\r\n\r\n            {/* 아래 필수정보 이메일, 비밀번호, 주소 */}\r\n            <div>\r\n              <P20 style={{ fontWeight: \"bold\", marginBottom: \"20px\" }}>\r\n                필수정보\r\n              </P20>\r\n              <Form.Item\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    type: \"email\",\r\n                    message: \"올바른 이메일 형식을 입력하세요.\",\r\n                  },\r\n                  {\r\n                    required: true,\r\n                    message: \"이메일을 입력하세요.\",\r\n                  },\r\n                  // {\r\n                  //   pattern:\r\n                  //     /^[A-Za-z0-9]([-_.]?[A-Za-z0-9])*@[A-Za-z0-9]([-_.]?[A-Za-z0-9])*\\.[A-Za-z]{2,3}$/i,\r\n                  //   message: \"이메일 형식에 맞게 작성해주세요\",\r\n                  // },\r\n                  {\r\n                    whitespace: true,\r\n                    message: \"이메일은 공백만으로 만들 수 없습니다\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  placeholder={email}\r\n                  style={{ height: 60, fontSize: \"20px\" }}\r\n                  onChange={e => setEmail(e.target.value)}\r\n                  value={email}\r\n                  disabled\r\n                />\r\n                {/* {errorMessage.includes(\"이메일\") && (\r\n                  <span style={{ color: \"red\" }}>{errorMessage}</span>\r\n                )} */}\r\n        </Form.Item>\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"비밀번호를 입력해 주세요!\",\r\n                  },\r\n                  {\r\n                    pattern:\r\n                      /^(?=.*[a-zA-Z])(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/,\r\n                    message:\r\n                      \"비밀번호는 8~16자 영문 대 소문자, 숫자, 특수문자를 사용해야 합니다.\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  style={areaStyle}\r\n                  type=\"password\"\r\n                  placeholder=\"비밀번호\"\r\n                  onChange={e => setPassword(e.target.value)}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"passwordch\"\r\n                dependencies={[\"password\"]}\r\n                hasFeedback\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"비밀번호 확인을 입력해 주세요!\",\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(_, value) {\r\n                      if (!value || getFieldValue(\"password\") === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\r\n                        new Error(\"비밀번호가 일치하지 않습니다.\"),\r\n                      );\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  style={areaStyle}\r\n                  placeholder=\"비밀번호 확인\"\r\n                  onChange={e => setPasswordch(e.target.value)}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Address onAddressChange={updateAddressInfo} />\r\n              <Form.Item\r\n                name=\"address2\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"상세주소를 입력하세요.\",\r\n                  },\r\n                  {\r\n                    max: 10,\r\n                    message: \"상세주소는 최대 10자까지 입력 가능합니다.\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  style={{ height: 60, fontSize: \"20px\" }}\r\n                  onChange={e => setAddress2(e.target.value)}\r\n                  placeholder=\"상세주소\"\r\n                />\r\n              </Form.Item>\r\n            </div>\r\n            <Form.Item>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                style={buttonPrimaryStyle}\r\n                // onClick={handleClickSearch}\r\n              >\r\n                회원가입\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </SignWrap>\r\n      </LoginWrap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SigninkakaoPage;","import styled from \"@emotion/styled/macro\";\nimport { Common } from \"../CommonCss\";\n\nexport const LoginWrap = styled.div`\n  min-width: 1300px;\n  padding: 130px 330px 130px 330px;\n`;\nexport const LoginTitle = styled.div`\n  position: relative;\n  width: 100%;\n  display: flex;\n  flex-direction: column; /* 세로로 요소를 나열하도록 설정 */\n  align-items: center;\n  /* padding: 30px 0 30px 0; */\n  .logo {\n    font-size: 50px;\n    font-weight: bold;\n    padding-bottom: 130px;\n  }\n  .email-line {\n    position: relative;\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: ${Common.color.p800};\n    padding-bottom: 50px;\n    /* padding: 20px 0 20px 0; */\n    p {\n      font-size: 20px;\n    }\n    .line {\n      height: 2px;\n      width: 30%;\n      background: ${Common.color.p800};\n    }\n  }\n  .login-line {\n    position: relative;\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: ${Common.color.p800};\n    padding: 20px 0 40px 0;\n    p {\n      font-size: 20px;\n    }\n    .line {\n      height: 2px;\n      width: 30%;\n      background: ${Common.color.p800};\n    }\n  }\n`;\nexport const LoginBt = styled.button`\n  width: 100%;\n  height: 60px;\n  margin-bottom: 17px;\n  border-radius: 8px;\n  font-size: 20px;\n  color: ${Common.color.p800};\n  /* background: ${Common.color.y900}; */\n  background: none;\n  border: 1px solid ${Common.color.p500};\n  cursor: pointer;\n  img {\n    width: 21px;\n    margin-right: 10px;\n  }\n`;\n","import { Common } from \"../CommonCss\";\n\nexport const themeObj = {\n  bgColor: \"#FFFFFF\",\n  pageBgColor: \"#FFFFFF\",\n  postcodeTextColor: \"#C05850\",\n  emphTextColor: \"#222222\",\n};\nexport const postCodeStyle = {\n  width: \"450px\",\n  height: \"500px\",\n};\n\nexport const areaStyle = {\n  width: \"640px\",\n  height: \"60px\",\n  fontSize: \"20px\",\n};\n\nexport const buttonPrimaryStyle = {\n  background: `${Common.color.f900}`,\n  width: \"100%\",\n  height: \"60px\",\n  fontSize: \"20px\",\n};\n"],"names":["addressState","atom","key","default","_ref","onAddressChange","address","oladdress","setAddress","useRecoilState","last","setLast","useState","isOpen","setIsOpen","isModalOpen","setIsModalOpen","values","setValues","useEffect","_jsxs","_Fragment","children","style","display","width","onClick","toggleHandler","_jsx","Form","Item","valuePropName","Input","height","fontSize","value","placeholder","name","Button","type","backgroundColor","concat","Common","color","p900","border","marginLeft","fontWeight","Modal","title","open","onOk","handleOk","onCancel","handleCancel","footer","DaumPostcode","theme","themeObj","postCodeStyle","onComplete","data","zonecode","prevValues","onClose","state","initState","email","nickname","password","passwordch","address2","gender","birthdate","phone","test","SigninkakaoPage","code","URL","window","location","href","searchParams","get","navigate","useNavigate","memberInfo","setMemberInfo","setNickname","setEmail","setPassword","setPasswordch","setGender","setBirthdate","setPhone","setAddress2","errorMessage","setErrorMessage","errorCode","setErrorCode","async","console","log","axios","headers","token","then","res","JSON","stringify","status","startsWith","catch","err","loginAxios","successFn","Swal","scroll","failFn","alert","errorFn","prevState","LoginWrap","LoginTitle","className","marginBottom","P20","f900","SignWrap","initialValues","remember","onFinish","inivalues","postSign","withdrawStatus","rules","required","message","pattern","whitespace","areaStyle","onChange","e","target","disabled","validator","_","year","substr","month","day","currentDate","Date","birthYear","parseInt","birthDate","getFullYear","Promise","reject","resolve","Select","p300","p600","borderRadius","Option","Password","dependencies","hasFeedback","_ref2","getFieldValue","Error","Address","max","htmlType","buttonPrimaryStyle","_styled","styles","p800","LoginBt","p500","bgColor","pageBgColor","postcodeTextColor","emphTextColor","background"],"sourceRoot":""}