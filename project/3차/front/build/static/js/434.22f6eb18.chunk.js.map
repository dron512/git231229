{"version":3,"file":"static/js/434.22f6eb18.chunk.js","mappings":"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","sources":["atom/addressState.js","components/singup/Address.js","pages/sign/SignupPage.js","styles/login/loginCss.js","styles/sign/signArea.js"],"sourcesContent":["import { atom } from \"recoil\";\n\nexport const addressState = atom({\n  key: \"addressState\",\n  default: \"\",\n});\n","import { Button, Form, Input, Modal } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport DaumPostcode from \"react-daum-postcode\";\nimport { useRecoilState } from \"recoil\";\nimport { Common } from \"../../styles/CommonCss\";\nimport { postCodeStyle, themeObj } from \"../../styles/sign/signArea\";\nimport { addressState } from \"../../atom/addressState\";\n\nconst Address = ({ onAddressChange, address:oladdress }) => {\n  const [address, setAddress] = useRecoilState(addressState);\n  const [last, setLast] = useState(\"\");\n  const [isOpen, setIsOpen] = useState(false);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [values, setValues] = useState({}); // values 객체 추가\n\n  useEffect(()=>{\n    setAddress(oladdress);\n  },[]);\n\n  const completeHandler = data => {\n    const { address, zonecode } = data;\n\n    setAddress(address);\n    setLast(address); // lastaddress를 address와 동일하게 설정\n    onAddressChange({ zonecode, address, last: address }); // lastaddress를 address와 동일하게 설정\n    setIsOpen(false);\n\n    // 주소 정보를 values 객체에 추가\n    setValues(prevValues => ({\n      ...prevValues,\n      address: address,\n    }));\n  };\n\n  // 주소 입력 변경 핸들러\n  const inputChangeHandler = event => {\n    setAddress({ ...address, last: event.target.value }); // Recoil 상태 업데이트\n  };\n\n  const closeHandler = state => {\n    if (state === \"FORCE_CLOSE\") {\n      setIsOpen(false);\n    } else if (state === \"COMPLETE_CLOSE\") {\n      setIsOpen(false);\n    }\n  };\n\n  const toggleHandler = () => {\n    setIsOpen(true);\n    setIsModalOpen(true);\n  };\n\n  const handleOk = () => {\n    setIsModalOpen(false);\n  };\n\n  const handleCancel = () => {\n    setIsModalOpen(false);\n  };\n\n  return (\n    <>\n      <div style={{ display: \"flex\", width: 193 }} onClick={toggleHandler}>\n        <Form.Item valuePropName=\"zipCode\">\n          <Input\n            style={{ width: 520, height: 60, fontSize: \"20px\" }}\n            value={address}\n            placeholder=\"주소\"\n            name=\"address\"\n          />\n        </Form.Item>\n\n        <Form.Item>\n          <Button\n            type=\"button\"\n            style={{\n              width: \"110px\",\n              height: \"60px\",\n              backgroundColor: `${Common.color.p900}`,\n              border: \"none\",\n              marginLeft: \"8px\",\n              color: \"white\",\n              fontWeight: \"bold\",\n              fontSize: \"16px\",\n            }}\n          >\n            주소찾기\n          </Button>\n        </Form.Item>\n      </div>\n\n      {isOpen && (\n        <Modal\n          title=\"주소 찾기\"\n          open={isModalOpen}\n          onOk={handleOk}\n          onCancel={handleCancel}\n          footer=\"\"\n        >\n          <DaumPostcode\n            theme={themeObj}\n            style={postCodeStyle}\n            onComplete={completeHandler}\n            onClose={closeHandler}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport default Address;\n","import { Button, Form, Input, Select } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useNavigate } from \"react-router\";\r\nimport { useRecoilState } from \"recoil\";\r\nimport { postSign } from \"../../api/signUpApi\";\r\nimport { addressState } from \"../../atom/addressState\";\r\nimport Address from \"../../components/singup/Address\";\r\nimport { P20, SignWrap } from \"../../styles/basic\";\r\nimport { Common } from \"../../styles/CommonCss\";\r\nimport { LoginTitle, LoginWrap } from \"../../styles/login/loginCss\";\r\nimport { areaStyle, buttonPrimaryStyle } from \"../../styles/sign/signArea\";\r\nimport axios from 'axios';\r\nimport { SERVER_URL } from '../../api/config';\r\nimport Swal from 'sweetalert2';\r\n\r\n// const initState = {\r\n//   email: \"aaa@naver.com\",\r\n//   nickname: \"아무거나\",\r\n//   password: \"aA123456!\",\r\n//   passwordch: \"\",\r\n//   address: \"\",\r\n//   address2: \"\",\r\n//   gender: \"MALE\",\r\n//   birthdate: \"20010510\",\r\n//   phone: \"01012345678\",\r\n// };\r\n\r\nconst initState = {\r\n  email: \"\",\r\n  nickname: \"\",\r\n  password: \"\",\r\n  passwordch: \"\",\r\n  address: \"\",\r\n  address2: \"\",\r\n  gender: \"\",\r\n  birthdate: \"\",\r\n  phone: \"\",\r\n};\r\nconst SignupPage = () => {\r\n  const navigate = useNavigate();\r\n  const [memberInfo, setMemberInfo] = useState(initState);\r\n\r\n  // const [address, setAddress] = useState(\"\");\r\n  const [nickname, setNickname] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n  const [passwordch, setPasswordch] = useState(\"\");\r\n  const [gender, setGender] = useState(\"\");\r\n  const [birthdate, setBirthdate] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [address, setAddress] = useRecoilState(addressState);\r\n  const [values, setValues] = useState({});\r\n  const [address2, setAddress2] = useState(\"\");\r\n  const [authNum, setAuthNum] = useState(\"\");\r\n  const [emailch, setEmailCh] = useState({\r\n    email:\"\",\r\n    auth:\"\"\r\n  });\r\n  const [errorMessage, setErrorMessage] = useState(\"\");\r\n  const [errorCode, setErrorCode] = useState(\"\");\r\n\r\n  const updateAddressInfo = ({ zonecode, address }) => {\r\n    // 주소 정보 업데이트\r\n    // setZonecode(zonecode);\r\n    setAddress(address);\r\n  };\r\n\r\n  const handleGenderChange = value => {\r\n    setGender(value); // 성별 상태 업데이트\r\n    setValues(prevValues => ({\r\n      ...prevValues,\r\n      gender: value,\r\n    }));\r\n  };\r\n  const onFinish = inivalues => {\r\n    const values = {\r\n      email,\r\n      password,\r\n      passwordch,\r\n      birthdate,\r\n      nickname,\r\n      phone,\r\n      gender: inivalues.gender,\r\n      address,\r\n      address2,\r\n    };\r\n    console.log(\"보냄\" + JSON.stringify(values));\r\n    postSign({\r\n      values,\r\n      address,\r\n      withdrawStatus: \"Y\",\r\n      emailch,\r\n      authNum,\r\n      successFn,\r\n      failFn,\r\n      errorFn,\r\n    });\r\n  };\r\n\r\n  const successFn = data => {\r\n    // console.log(\"successFn : \", data);\r\n      setMemberInfo(data);\r\n      Swal.fire(\"가입 완료!\");\r\n      navigate(`/sign/in`);\r\n      window.scroll(0,0)\r\n  };\r\n\r\n  const failFn = data => {\r\n    console.log(\"failFn : \", data);\r\n    setErrorMessage(data.errorMessage);\r\n    setErrorCode(data.errorCode);\r\n    alert(data.errorMessage);\r\n  };\r\n\r\n  const errorFn = data => {\r\n    // console.log(\"errorFn : \", data);\r\n    alert(\"서버상태 불안정 다음에 회원가입 시도\");\r\n    setMemberInfo(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // address 상태가 변경될 때마다 initialValues 업데이트\r\n    setMemberInfo(prevState => ({\r\n      ...prevState,\r\n      address: address,\r\n    }));\r\n    console.log(emailch)\r\n  }, [address,emailch]);\r\n\r\n  const emailauth = async () =>{\r\n    const body = {\r\n      email : email\r\n    }\r\n    console.log(body)\r\n    await axios.post(`${SERVER_URL}/login/emailauth`,body,{\r\n    }).then(res => {\r\n      if(JSON.stringify(res.status).startsWith('2')){\r\n        setEmailCh({email:email,auth:res.data})\r\n        Swal.fire('인증번호가 발송됐습니다.')\r\n      }\r\n    }).catch(e => {\r\n      console.log(e)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <LoginWrap>\r\n        <LoginTitle>\r\n          <p className=\"logo\">회원가입</p>\r\n        </LoginTitle>\r\n        <div style={{ marginBottom: \"20px\" }}>\r\n          <P20 style={{ color: `${Common.color.f900}` }}>\r\n            만 20세 미만은 회원가입이 불가합니다.\r\n          </P20>\r\n          <P20>아래 정보를 입력하시면 회원가입이 완료됩니다.</P20>\r\n        </div>\r\n\r\n        <SignWrap>\r\n          <Form\r\n            name=\"normal_login\"\r\n            className=\"login-form\"\r\n            initialValues={{\r\n              remember: true,\r\n              email: memberInfo.email,\r\n              password: memberInfo.password,\r\n              passwordch: memberInfo.passwordch,\r\n              birthdate: memberInfo.birthdate,\r\n              nickname: memberInfo.nickname,\r\n              phone: memberInfo.phone,\r\n              gender: memberInfo.gender,\r\n              address: address,\r\n              address2: memberInfo.address2,\r\n            }}\r\n            onFinish={onFinish}\r\n          >\r\n            <div style={{ marginBottom: \"80px\" }}>\r\n              <P20 style={{ fontWeight: \"bold\", marginBottom: \"20px\" }}>\r\n                본인인증정보\r\n              </P20>\r\n              <Form.Item\r\n                name=\"nickname\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"닉네임을 입력하세요.\",\r\n                  },\r\n                  {\r\n                    pattern: /^[가-힣]{2,10}$/,\r\n                    message: \"한글로 2~10자 사이의 이름을 입력하세요.\",\r\n                  },\r\n                  {\r\n                    whitespace: true,\r\n                    message: \"이름은 공백만으로 만들 수 없습니다\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  style={areaStyle}\r\n                  placeholder=\"닉네임\"\r\n                  onChange={e => setNickname(e.target.value)}\r\n                />\r\n              </Form.Item>\r\n              <div style={{ display: \"flex\" }}>\r\n                <Form.Item\r\n                  name=\"birthdate\"\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: \"생년월일을 입력하세요.\",\r\n                    },\r\n                    {\r\n                      pattern: /^[0-9]{8}$/,\r\n                      message: \"숫자로 8자로 입력해주세요.\",\r\n                    },\r\n                    {\r\n                      pattern: /^[0-9]+$/,\r\n                      message: \"숫자만 입력하세요.\",\r\n                    },\r\n                    {\r\n                      whitespace: true,\r\n                      message: \"공백만으로 만들 수 없습니다\",\r\n                    },\r\n                    {\r\n                      validator: (_, value) => {\r\n                        // 주민등록번호 문자열을 날짜로 변환\r\n                        const year = value.substr(0, 4);\r\n                        const month = value.substr(4, 2);\r\n                        const day = value.substr(6, 2);\r\n\r\n                        // 현재 날짜 구하기\r\n                        const currentDate = new Date();\r\n\r\n                        // 생년월일 계산\r\n                        const birthYear =(\r\n                          parseInt(year.substr(0, 2)) > 19\r\n                            ? 2000 + parseInt(year.substr(2, 2))\r\n                            : 1900 + parseInt(year.substr(2, 2)));\r\n                        const birthDate = new Date(\r\n                          birthYear,\r\n                          parseInt(month),\r\n                          parseInt(day),\r\n                        );\r\n\r\n                        // 나이 계산\r\n                        const age =\r\n                          currentDate.getFullYear() - birthDate.getFullYear();\r\n\r\n                        // 생일이 지났는지 체크\r\n                        // if (\r\n                        //   currentDate.getMonth() < birthDate.getMonth() ||\r\n                        //   (currentDate.getMonth() === birthDate.getMonth() &&\r\n                        //     currentDate.getDate() < birthDate.getDate())\r\n                        // )\r\n                          if (age < 20) {\r\n                            // 20세 미만인 경우 에러 반환\r\n                            return Promise.reject(\r\n                              \"20세 미만은 가입할 수 없습니다.\",\r\n                            );\r\n                          }\r\n                        return Promise.resolve();\r\n                      },\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Input\r\n                    style={{ width: 520, height: 60, fontSize: \"20px\" }}\r\n                    placeholder=\"생년월일(8자리)\"\r\n                    onChange={e => setBirthdate(e.target.value)}\r\n                  />\r\n                </Form.Item>\r\n                <Form.Item name=\"gender\">\r\n                  <Select\r\n                    style={{\r\n                      width: \"110px\",\r\n                      height: \"60px\",\r\n                      backgroundColor: `${Common.color.p300}`,\r\n                      marginLeft: \"8px\",\r\n                      color: `${Common.color.p600}`,\r\n                      fontSize: \"20px\",\r\n                      borderRadius: \"20px\",\r\n                    }}\r\n                    onClick={handleGenderChange}\r\n                  >\r\n                    <Select.Option value=\"\">성별</Select.Option>\r\n                    <Select.Option value=\"FEMALE\">여성</Select.Option>\r\n                    <Select.Option value=\"MALE\">남성</Select.Option>\r\n                  </Select>\r\n                </Form.Item>\r\n              </div>\r\n              <div style={{ display: \"flex\" }}>\r\n                <Form.Item\r\n                  name=\"phone\"\r\n                  rules={[\r\n                    {\r\n                      required: true,\r\n                      message: \"전화번호를 입력 해주세요\",\r\n                    },\r\n                    {\r\n                      pattern: /^[0-9]+$/,\r\n                      message: \"숫자만 입력하세요.\",\r\n                    },\r\n                    {\r\n                      whitespace: true,\r\n                      message: \"전화번호는 공백만으로 만들 수 없습니다\",\r\n                    },\r\n                  ]}\r\n                >\r\n                  <Input\r\n                    // defaultValue=\"010\"\r\n                    style={{ width: 520, height: 60, fontSize: \"20px\" }}\r\n                    placeholder=\"전화번호\"\r\n                    onChange={e => setPhone(e.target.value)}\r\n                  />\r\n                </Form.Item>\r\n              </div>\r\n            </div>\r\n\r\n            {/* 아래 필수정보 이메일, 비밀번호, 주소 */}\r\n            <div>\r\n              <P20 style={{ fontWeight: \"bold\", marginBottom: \"20px\" }}>\r\n                필수정보\r\n              </P20>\r\n              <div style={{ display: \"flex\", width: 193 }}>\r\n              <Form.Item\r\n                name=\"email\"\r\n                rules={[\r\n                  {\r\n                    type: \"email\",\r\n                    message: \"올바른 이메일 형식을 입력하세요.\",\r\n                  },\r\n                  {\r\n                    required: true,\r\n                    message: \"이메일을 입력하세요.\",\r\n                  },\r\n                  // {\r\n                  //   pattern:\r\n                  //     /^[A-Za-z0-9]([-_.]?[A-Za-z0-9])*@[A-Za-z0-9]([-_.]?[A-Za-z0-9])*\\.[A-Za-z]{2,3}$/i,\r\n                  //   message: \"이메일 형식에 맞게 작성해주세요\",\r\n                  // },\r\n                  {\r\n                    whitespace: true,\r\n                    message: \"이메일은 공백만으로 만들 수 없습니다\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  placeholder=\"이메일(대소문자를 확인해 주세요)\"\r\n                  style={{ width: 520, height: 60, fontSize: \"20px\" }}\r\n                  onChange={e => setEmail(e.target.value)}\r\n                />\r\n                {/* {errorMessage.includes(\"이메일\") && (\r\n                  <span style={{ color: \"red\" }}>{errorMessage}</span>\r\n                )} */}\r\n              </Form.Item>\r\n              <Form.Item>\r\n          <Button\r\n            type=\"button\"\r\n            style={{\r\n              width: \"110px\",\r\n              height: \"60px\",\r\n              backgroundColor: `${Common.color.p900}`,\r\n              border: \"none\",\r\n              marginLeft: \"8px\",\r\n              color: \"white\",\r\n              fontWeight: \"bold\",\r\n              fontSize: \"16px\",\r\n            }}\r\n            onClick={emailauth}\r\n          >\r\n            인증하기\r\n          </Button>\r\n        </Form.Item>\r\n              </div>\r\n              <Form.Item\r\n                name=\"authnum\"\r\n              >\r\n                <Input\r\n                  style={{ height: 60, fontSize: \"20px\" }}\r\n                  onChange={e => setAuthNum(e.target.value)}\r\n                  placeholder=\"인증번호입력\"\r\n                />\r\n                <p>인증메일이 안오셨을 경우 이메일을 확인해 주세요.</p>\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"password\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"비밀번호를 입력해 주세요!\",\r\n                  },\r\n                  {\r\n                    pattern:\r\n                      /^(?=.*[a-zA-Z])(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,16}$/,\r\n                    message:\r\n                      \"비밀번호는 8~16자 영문 대 소문자, 숫자, 특수문자를 사용해야 합니다.\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  style={areaStyle}\r\n                  type=\"password\"\r\n                  placeholder=\"비밀번호\"\r\n                  onChange={e => setPassword(e.target.value)}\r\n                />\r\n              </Form.Item>\r\n              <Form.Item\r\n                name=\"passwordch\"\r\n                dependencies={[\"password\"]}\r\n                hasFeedback\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"비밀번호 확인을 입력해 주세요!\",\r\n                  },\r\n                  ({ getFieldValue }) => ({\r\n                    validator(_, value) {\r\n                      if (!value || getFieldValue(\"password\") === value) {\r\n                        return Promise.resolve();\r\n                      }\r\n                      return Promise.reject(\r\n                        new Error(\"비밀번호가 일치하지 않습니다.\"),\r\n                      );\r\n                    },\r\n                  }),\r\n                ]}\r\n              >\r\n                <Input.Password\r\n                  style={areaStyle}\r\n                  placeholder=\"비밀번호 확인\"\r\n                  onChange={e => setPasswordch(e.target.value)}\r\n                />\r\n              </Form.Item>\r\n\r\n              <Address onAddressChange={updateAddressInfo} />\r\n              <Form.Item\r\n                name=\"address2\"\r\n                rules={[\r\n                  {\r\n                    required: true,\r\n                    message: \"상세주소를 입력하세요.\",\r\n                  },\r\n                  {\r\n                    max: 10,\r\n                    message: \"상세주소는 최대 10자까지 입력 가능합니다.\",\r\n                  },\r\n                ]}\r\n              >\r\n                <Input\r\n                  style={{ height: 60, fontSize: \"20px\" }}\r\n                  onChange={e => setAddress2(e.target.value)}\r\n                  placeholder=\"상세주소\"\r\n                />\r\n              </Form.Item>\r\n            </div>\r\n            <Form.Item>\r\n              <Button\r\n                type=\"primary\"\r\n                htmlType=\"submit\"\r\n                style={buttonPrimaryStyle}\r\n                // onClick={handleClickSearch}\r\n              >\r\n                회원가입\r\n              </Button>\r\n            </Form.Item>\r\n          </Form>\r\n        </SignWrap>\r\n      </LoginWrap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SignupPage;\r\n","import styled from \"@emotion/styled/macro\";\nimport { Common } from \"../CommonCss\";\n\nexport const LoginWrap = styled.div`\n  min-width: 1300px;\n  padding: 130px 330px 130px 330px;\n`;\nexport const LoginTitle = styled.div`\n  position: relative;\n  width: 100%;\n  display: flex;\n  flex-direction: column; /* 세로로 요소를 나열하도록 설정 */\n  align-items: center;\n  /* padding: 30px 0 30px 0; */\n  .logo {\n    font-size: 50px;\n    font-weight: bold;\n    padding-bottom: 130px;\n  }\n  .email-line {\n    position: relative;\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: ${Common.color.p800};\n    padding-bottom: 50px;\n    /* padding: 20px 0 20px 0; */\n    p {\n      font-size: 20px;\n    }\n    .line {\n      height: 2px;\n      width: 30%;\n      background: ${Common.color.p800};\n    }\n  }\n  .login-line {\n    position: relative;\n    width: 100%;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    color: ${Common.color.p800};\n    padding: 20px 0 40px 0;\n    p {\n      font-size: 20px;\n    }\n    .line {\n      height: 2px;\n      width: 30%;\n      background: ${Common.color.p800};\n    }\n  }\n`;\nexport const LoginBt = styled.button`\n  width: 100%;\n  height: 60px;\n  margin-bottom: 17px;\n  border-radius: 8px;\n  font-size: 20px;\n  color: ${Common.color.p800};\n  /* background: ${Common.color.y900}; */\n  background: none;\n  border: 1px solid ${Common.color.p500};\n  cursor: pointer;\n  img {\n    width: 21px;\n    margin-right: 10px;\n  }\n`;\n","import { Common } from \"../CommonCss\";\n\nexport const themeObj = {\n  bgColor: \"#FFFFFF\",\n  pageBgColor: \"#FFFFFF\",\n  postcodeTextColor: \"#C05850\",\n  emphTextColor: \"#222222\",\n};\nexport const postCodeStyle = {\n  width: \"450px\",\n  height: \"500px\",\n};\n\nexport const areaStyle = {\n  width: \"640px\",\n  height: \"60px\",\n  fontSize: \"20px\",\n};\n\nexport const buttonPrimaryStyle = {\n  background: `${Common.color.f900}`,\n  width: \"100%\",\n  height: \"60px\",\n  fontSize: \"20px\",\n};\n"],"names":["addressState","atom","key","default","_ref","onAddressChange","address","oladdress","setAddress","useRecoilState","last","setLast","useState","isOpen","setIsOpen","isModalOpen","setIsModalOpen","values","setValues","useEffect","_jsxs","_Fragment","children","style","display","width","onClick","toggleHandler","_jsx","Form","Item","valuePropName","Input","height","fontSize","value","placeholder","name","Button","type","backgroundColor","concat","Common","color","p900","border","marginLeft","fontWeight","Modal","title","open","onOk","handleOk","onCancel","handleCancel","footer","DaumPostcode","theme","themeObj","postCodeStyle","onComplete","data","zonecode","prevValues","onClose","state","initState","email","nickname","password","passwordch","address2","gender","birthdate","phone","SignupPage","navigate","useNavigate","memberInfo","setMemberInfo","setNickname","setEmail","setPassword","setPasswordch","setGender","setBirthdate","setPhone","setAddress2","authNum","setAuthNum","emailch","setEmailCh","auth","errorMessage","setErrorMessage","errorCode","setErrorCode","successFn","Swal","window","scroll","failFn","console","log","alert","errorFn","prevState","LoginWrap","LoginTitle","className","marginBottom","P20","f900","SignWrap","initialValues","remember","onFinish","inivalues","JSON","stringify","postSign","withdrawStatus","rules","required","message","pattern","whitespace","areaStyle","onChange","e","target","validator","_","year","substr","month","day","currentDate","Date","birthYear","parseInt","birthDate","getFullYear","Promise","reject","resolve","Select","p300","p600","borderRadius","Option","async","body","axios","post","SERVER_URL","then","res","status","startsWith","catch","Password","dependencies","hasFeedback","_ref2","getFieldValue","Error","Address","max","htmlType","buttonPrimaryStyle","_styled","styles","p800","LoginBt","p500","bgColor","pageBgColor","postcodeTextColor","emphTextColor","background"],"sourceRoot":""}